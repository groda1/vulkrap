Renderer:
    [ ] Render to texture. Support for multiple renderpasses.
    [ ] Texture mipmaps
    [ ] Memory handling for images is weird. Handled by image.rs instead of the memory manager. fix!
    [ ] Proper device picking
    [ ] Dont allocate buffer memory on every vertex/index buffer creation. This could be managed by an allocator. See memory.rs
    [ ] Maybe create a separate queue for transfering data instead of graphics_queue for everything?
    [ ] Multiple textures could be stored as an array with a single binding. See descriptor_count in create_descriptor_set_layout (pipeline.rs)
    [x] Alpha blending
    [x] texture mapping
    [x] Fix fragment uniforms
    [x] Pipeline should not own uniform buffer and memory. Should be possible to use the same uniform for several pipelines
    [x] Pipeline: General uniform data. Maybe a simple uniform struct containing data ptr + size?
    [x] vertex_input_assembly VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP, (If you set the primitiveRestartEnable member to VK_TRUE, then it's possible to break up lines and triangles in the _STRIP topology modes by using a special index of 0xFFFF or 0xFFFFFFFF)
    [x] Depth buffering
    [x] Setup a usable API for a game structure
    [x] Recreating swapchain should possibly recreate uniform buffers as the number of images could change.

Engine:
    [ ] read and save config file
    [ ] Include shaders in binary
    [x] Config system
    [x] Camera
    [x] Setup game structure. Which holds the rendering context and is called from window

UI:
    [ ] Console command parsing. cvar setting
    [ ] Initial console
    [x] Text rendering

Terrain:
    [ ] Octree LOD rendering

Window:
    [x] Handle resize events. Make sure this works on mac. Seems broken atm
    [x] Measure delta time properly
